package PaSoC

import chisel3._       // chisel本体
import chisel3.util._  // BitPat比较

object Consts {  // 常量定义 
  val WORD_LEN      = 32

  // 外设地址
  val GPIO_OUT_ADDR = 0x10000000.U(WORD_LEN.W)
  val GPIO_IN_ADDR  = 0x10000004.U(WORD_LEN.W)

  val START_ADDR    = 0.U(WORD_LEN.W)
  val BUBBLE        = 0x00000013.U(WORD_LEN.W)  // [ADDI x0,x0,0] = BUBBLE
  val UNIMP         = "x_c0001073".U(WORD_LEN.W) // [CSRRW x0, cycle, x0]
  val ADDR_LEN      = 5 // rs1,rs2,rb
  val CSR_ADDR_LEN  = 12
  val VLEN          = 128
  val LMUL_LEN      = 2
  val SEW_LEN       = 11
  val VL_ADDR       = 0xC20
  val VTYPE_ADDR    = 0xC21

  val EXE_FUN_LEN = 5
  val ALU_X       =  0.U(EXE_FUN_LEN.W)
  val ALU_ADD     =  1.U(EXE_FUN_LEN.W)
  val ALU_SUB     =  2.U(EXE_FUN_LEN.W)
  val ALU_AND     =  3.U(EXE_FUN_LEN.W)
  val ALU_OR      =  4.U(EXE_FUN_LEN.W)
  val ALU_XOR     =  5.U(EXE_FUN_LEN.W)
  val ALU_SLL     =  6.U(EXE_FUN_LEN.W)
  val ALU_SRL     =  7.U(EXE_FUN_LEN.W)
  val ALU_SRA     =  8.U(EXE_FUN_LEN.W)
  val ALU_SLT     =  9.U(EXE_FUN_LEN.W)
  val ALU_SLTU    = 10.U(EXE_FUN_LEN.W)
  val BR_BEQ      = 11.U(EXE_FUN_LEN.W)
  val BR_BNE      = 12.U(EXE_FUN_LEN.W)
  val BR_BLT      = 13.U(EXE_FUN_LEN.W)
  val BR_BGE      = 14.U(EXE_FUN_LEN.W)
  val BR_BLTU     = 15.U(EXE_FUN_LEN.W)
  val BR_BGEU     = 16.U(EXE_FUN_LEN.W)
  val ALU_JALR    = 17.U(EXE_FUN_LEN.W)
  val ALU_CP1     = 18.U(EXE_FUN_LEN.W)
  val ALU_VADDVV  = 19.U(EXE_FUN_LEN.W)
  val VSET        = 20.U(EXE_FUN_LEN.W)
  val ALU_PCNT    = 21.U(EXE_FUN_LEN.W)

  val OP1_LEN = 2
  val OP1_RS1 = 0.U(OP1_LEN.W)
  val OP1_PC  = 1.U(OP1_LEN.W)
  val OP1_X   = 2.U(OP1_LEN.W)
  val OP1_IMZ = 3.U(OP1_LEN.W)

  val OP2_LEN = 3
  val OP2_X   = 0.U(OP2_LEN.W)
  val OP2_RS2 = 1.U(OP2_LEN.W)
  val OP2_IMI = 2.U(OP2_LEN.W)
  val OP2_IMS = 3.U(OP2_LEN.W)
  val OP2_IMJ = 4.U(OP2_LEN.W)
  val OP2_IMU = 5.U(OP2_LEN.W)

  val MEN_LEN = 2
  val MEN_X   = 0.U(MEN_LEN.W)
  val MEN_S   = 1.U(MEN_LEN.W) // スカラ命令用
  val MEN_V   = 2.U(MEN_LEN.W) // ベクトル命令用

  val REN_LEN = 2
  val REN_X   = 0.U(REN_LEN.W)
  val REN_S   = 1.U(REN_LEN.W) // スカラ命令用
  val REN_V   = 2.U(REN_LEN.W) // ベクトル命令用

  val WB_SEL_LEN = 3
  val WB_X       = 0.U(WB_SEL_LEN.W)
  val WB_ALU     = 0.U(WB_SEL_LEN.W)
  val WB_MEM     = 1.U(WB_SEL_LEN.W)
  val WB_PC      = 2.U(WB_SEL_LEN.W)
  val WB_CSR     = 3.U(WB_SEL_LEN.W)
  val WB_MEM_V   = 4.U(WB_SEL_LEN.W)
  val WB_ALU_V   = 5.U(WB_SEL_LEN.W)
  val WB_VL      = 6.U(WB_SEL_LEN.W)

  val MW_LEN = 3
  val MW_X   = 0.U(MW_LEN.W)
  val MW_W   = 1.U(MW_LEN.W)
  val MW_H   = 2.U(MW_LEN.W)
  val MW_B   = 3.U(MW_LEN.W)
  val MW_HU  = 4.U(MW_LEN.W)
  val MW_BU  = 5.U(MW_LEN.W)

  val CSR_LEN = 3
  val CSR_X   = 0.U(CSR_LEN.W)
  val CSR_W   = 1.U(CSR_LEN.W)
  val CSR_S   = 2.U(CSR_LEN.W)
  val CSR_C   = 3.U(CSR_LEN.W)
  val CSR_E   = 4.U(CSR_LEN.W)
  val CSR_V   = 5.U(CSR_LEN.W)
}

object Instructions {  // RISCV指令集 
  // ロード・ストア | 加载・存储
  val LW      = BitPat("b?????????????????010?????0000011")
  val SW      = BitPat("b?????????????????010?????0100011")

  // 加算
  val ADD     = BitPat("b0000000??????????000?????0110011")
  val ADDI    = BitPat("b?????????????????000?????0010011")

  // 減算
  val SUB     = BitPat("b0100000??????????000?????0110011")

  // 論理演算 | 逻辑运算
  val AND     = BitPat("b0000000??????????111?????0110011")
  val OR      = BitPat("b0000000??????????110?????0110011")
  val XOR     = BitPat("b0000000??????????100?????0110011")
  val ANDI    = BitPat("b?????????????????111?????0010011")
  val ORI     = BitPat("b?????????????????110?????0010011")
  val XORI    = BitPat("b?????????????????100?????0010011")

  // シフト | 移位
  val SLL     = BitPat("b0000000??????????001?????0110011")
  val SRL     = BitPat("b0000000??????????101?????0110011")
  val SRA     = BitPat("b0100000??????????101?????0110011")
  val SLLI    = BitPat("b0000000??????????001?????0010011")
  val SRLI    = BitPat("b0000000??????????101?????0010011")
  val SRAI    = BitPat("b0100000??????????101?????0010011")

  // 比較
  val SLT     = BitPat("b0000000??????????010?????0110011")
  val SLTU    = BitPat("b0000000??????????011?????0110011")
  val SLTI    = BitPat("b?????????????????010?????0010011")
  val SLTIU   = BitPat("b?????????????????011?????0010011")

  // 条件分岐
  val BEQ     = BitPat("b?????????????????000?????1100011")
  val BNE     = BitPat("b?????????????????001?????1100011")
  val BLT     = BitPat("b?????????????????100?????1100011")
  val BGE     = BitPat("b?????????????????101?????1100011")
  val BLTU    = BitPat("b?????????????????110?????1100011")
  val BGEU    = BitPat("b?????????????????111?????1100011")

  // ジャンプ | 跳转
  val JAL     = BitPat("b?????????????????????????1101111")
  val JALR    = BitPat("b?????????????????000?????1100111")

  // 即値ロード | 立即数加载
  val LUI     = BitPat("b?????????????????????????0110111")
  val AUIPC   = BitPat("b?????????????????????????0010111")

  // CSR
  val CSRRW   = BitPat("b?????????????????001?????1110011")
  val CSRRWI  = BitPat("b?????????????????101?????1110011")
  val CSRRS   = BitPat("b?????????????????010?????1110011")
  val CSRRSI  = BitPat("b?????????????????110?????1110011")
  val CSRRC   = BitPat("b?????????????????011?????1110011")
  val CSRRCI  = BitPat("b?????????????????111?????1110011")

  // 例外 | 异常
  val ECALL   = BitPat("b00000000000000000000000001110011")

  // ベクトル | 向量
  val VSETVLI = BitPat("b?????????????????111?????1010111")
  val VLE     = BitPat("b000000100000?????????????0000111")
  val VSE     = BitPat("b000000100000?????????????0100111")
  val VADDVV  = BitPat("b0000001??????????000?????1010111")

  // カスタム | 自定义
  val PCNT    = BitPat("b000000000000?????110?????0001011")
}


